import streamlit as st
import pandas as pd
import joblib
import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
st.set_page_config( layout="centered")
st.title("Machine Learning Demo")


# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_csv("diabetes_dataset.csv")

st.title("üìä Data Visualization")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü Scatter Plot
fig, ax = plt.subplots()
ax.scatter(df[df["Outcome"] == 0]["Glucose"], df[df["Outcome"] == 0]["BMI"], label="Is'n Diabetes (0)", alpha=0.5)
ax.scatter(df[df["Outcome"] == 1]["Glucose"], df[df["Outcome"] == 1]["BMI"], label="Diabetes (1)", alpha=0.5, color="red")

ax.set_xlabel("Glucose Level")
ax.set_ylabel("BMI")
ax.set_title("Scatter Plot: Glucose vs BMI from Outcome")
ax.legend()
ax.grid(True)

# ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÉ‡∏ô Streamlit
st.pyplot(fig)

# ‡πÅ‡∏¢‡∏Å Features ‡πÅ‡∏•‡∏∞ Target
X = df.drop(columns=["Outcome"])
y = df["Outcome"]

# ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô Train/Test (80/20)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)

# ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• Logistic Regression
model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Scaler ‡πÉ‡∏´‡∏°‡πà
joblib.dump(model, "logistic_regression_model.pkl")
joblib.dump(scaler, "scaler.pkl")

print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ Scaler ‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß!")

# ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ
st.title("üîç Diabetes Prediction App")
st.write("‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° **‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤** ")

def predict_diabetes(data):
    data_scaled = scaler.transform(data)
    prediction = model.predict(data_scaled)
    return ["‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô" if pred == 1 else "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô" for pred in prediction]


columns = ['Age', 'Pregnancies', 'BMI', 'Glucose', 'BloodPressure', 'HbA1c', 'LDL', 'HDL', 'Triglycerides',
           'WaistCircumference', 'HipCircumference', 'WHR', 'FamilyHistory', 'DietType', 'Hypertension', 'MedicationUse']

# ‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session_state ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
if 'input_data' not in st.session_state:
    st.session_state.input_data = {col: None for col in columns}  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

def generate_default_value(col):
    default_values = {
        'Age': random.randint(20, 80),
        'Pregnancies': random.randint(0, 10),
        'BMI': round(random.uniform(18.5, 35.0), 2),
        'Glucose': round(random.uniform(70, 200), 1),
        'BloodPressure': round(random.uniform(60, 140), 1),
        'HbA1c': round(random.uniform(4.0, 10.0), 1),
        'LDL': round(random.uniform(50, 200), 1),
        'HDL': round(random.uniform(30, 80), 1),
        'Triglycerides': round(random.uniform(50, 250), 1),
        'WaistCircumference': round(random.uniform(60, 120), 1),
        'HipCircumference': round(random.uniform(80, 140), 1),
        'WHR': round(random.uniform(0.7, 1.2), 2),
        'FamilyHistory': random.choice([0, 1]),
        'DietType': random.choice([0, 1]),
        'Hypertension': random.choice([0, 1]),
        'MedicationUse': random.choice([0, 1])
    }
    return default_values.get(col, 0)

# ‡∏õ‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
col1, col2, col3 = st.columns(3)

with col1:
    if st.button("üîÆ ‡∏™‡∏∏‡πà‡∏°‡∏Ñ‡πà‡∏≤"):
        for col in columns:
            st.session_state.input_data[col] = generate_default_value(col)

with col2:
    if st.button("üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"):
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô session_state
        st.session_state.input_data = {col: None for col in columns}

with col3:
    if st.button("üîÆ ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•"):
        if None in st.session_state.input_data.values():
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        else:
            input_df = pd.DataFrame([list(st.session_state.input_data.values())], columns=columns)
            prediction = predict_diabetes(input_df)[0]
            st.success(f"‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: **{prediction}**")

# ‡∏ñ‡πâ‡∏≤ User ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á
for col in columns:
    st.session_state.input_data[col] = st.number_input(f"{col}", value=st.session_state.input_data[col])



# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
st.sidebar.title("üìû ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠")
st.sidebar.info("""
    **‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà**:

    **Email**: [s6604062663108@email.kmutnb](mailto:s6604062663108@email.kmutnb.ac.th)   
    **‡∏ä‡∏∑‡πà‡∏≠**: ‡∏î‡∏∏‡∏•‡∏¢‡∏ß‡∏±‡∏ï ‡∏™‡∏µ‡πÅ‡∏Å‡πâ‡∏ß              
    **‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤**: 6604062663108

    **Email**: [s6604062663159@email.kmutnb](mailto:s6604062663159@email.kmutnb.ac.th) 
    **‡∏ä‡∏∑‡πà‡∏≠**: ‡∏ò‡∏µ‡∏£‡∏†‡∏±‡∏ó‡∏£ ‡∏à‡∏∏‡∏•‡πÄ‡∏ß‡∏ä             
    **‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤**: 6604062663159
""")